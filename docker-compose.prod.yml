version: '3.8'

services:
  # Aplicação Laravel (Produção)
  app:
    build:
      context: .
      dockerfile: docker/production/Dockerfile
    image: sistema-biblioteca-app:prod
    container_name: biblioteca_app_prod
    restart: always
    working_dir: /var/www
    volumes:
      - ./storage:/var/www/storage
      - ./bootstrap/cache:/var/www/bootstrap/cache
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    networks:
      - biblioteca-network
    depends_on:
      - db
      - redis

  # Servidor Web Nginx (Produção)
  webserver:
    image: nginx:alpine
    container_name: biblioteca_webserver_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./public:/var/www/public:ro
      - ./docker/nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./storage/logs/nginx:/var/log/nginx
    networks:
      - biblioteca-network
    depends_on:
      - app

  # Banco de Dados MySQL (Produção)
  db:
    image: mysql:8.0
    container_name: biblioteca_db_prod
    restart: always
    environment:
      MYSQL_DATABASE: sistema_biblioteca_prod
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - biblioteca_db_prod_data:/var/lib/mysql
      - ./docker/mysql/prod.cnf:/etc/mysql/my.cnf:ro
      - ./storage/logs/mysql:/var/log/mysql
    networks:
      - biblioteca-network

  # Redis (Produção)
  redis:
    image: redis:7-alpine
    container_name: biblioteca_redis_prod
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - biblioteca_redis_prod_data:/data
    networks:
      - biblioteca-network

  # Backup automático
  backup:
    image: mysql:8.0
    container_name: biblioteca_backup
    restart: "no"
    volumes:
      - ./backups:/backups
      - ./docker/scripts:/scripts:ro
    environment:
      - MYSQL_HOST=db
      - MYSQL_DATABASE=sistema_biblioteca_prod
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    networks:
      - biblioteca-network
    depends_on:
      - db
    command: /scripts/backup.sh

# Volumes para produção
volumes:
  biblioteca_db_prod_data:
    driver: local
  biblioteca_redis_prod_data:
    driver: local

# Networks
networks:
  biblioteca-network:
    driver: bridge